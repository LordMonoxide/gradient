buildscript {
  repositories {
    maven { url = "http://files.minecraftforge.net/maven" }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
  }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

ext.configFile = file "build.properties"
configFile.withReader {
  def prop = new Properties()
  prop.load(it)
  project.ext.config = new ConfigSlurper().parse prop
}

version = config.version
group = "lordmonoxide.gradient" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "gradient"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.10' // Need this here so eclipse task generates correctly.

minecraft {
  // the mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   snapshot are built nightly.
  // stable_#            stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not allways work.
  // simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'snapshot', version: '20190509-1.13.2'
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  //TODO: this is only necessary until Forge fixes other mods' ATs not being run
  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // default run configurations.
  // these can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      // recommended logging data for a userdev environment
      properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
      // recommended logging level for the console
      properties 'forge.logging.console.level': 'info'

      properties 'forge.logging.noansi': 'false'

      mods {
        gradient {
          source sourceSets.main
        }
      }
    }
    server {
      workingDirectory project.file('run')

      // recommended logging data for a userdev environment
      properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
      // recommended logging level for the console
      properties 'forge.logging.console.level': 'debug'

      properties 'forge.logging.noansi': 'false'

      mods {
        gradient {
          source sourceSets.main
        }
      }
    }
  }
}

repositories {
  maven {
    //IC2
    name = "player-ic2"
    url = "http://maven.ic2.player.to/"
  }

  //maven {
  //  name = "BuildCraft"
  //  url = "http://www.mod-buildcraft.com/maven"
  //}

  maven {
    // JEI
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.13.2-25.0.193'

  //deobfCompile 'net.industrial-craft:industrialcraft-2:2.8.111-ex112'

  //deobfCompile 'com.mod-buildcraft:buildcraft-all:7.99.23'

  // compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei-1.13.2:5.0.0.20:api")
  // at runtime, use the full JEI jar
  runtimeOnly fg.deobf("mezz.jei:jei-1.13.2:5.0.0.20")

  compile "org.joml:joml:1.9.9"

  testCompile "org.junit.jupiter:junit-jupiter-api:5.3.2"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"

  // you may put jars on which you depend on in ./libs
  // or you may define them like so..
  //compile "some.group:artifact:version:classifier"
  //compile "some.group:artifact:version"

  // real examples
  //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
  // except that these dependencies get remapped to your current MCP mappings
  //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
  //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // for more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
      "Specification-Title": "examplemod",
      "Specification-Vendor": "examplemodsareus",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor" :"examplemodsareus",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
  type 'jar'
  builtBy 'reobfJar'
}
publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact reobfArtifact
    }
  }
  repositories {
    maven {
      url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}

junitPlatformTest {
  finalizedBy jacocoTestReport
}
